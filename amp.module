<?php

/**
 * @file
 * Contains amp.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function amp_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the amp module.
    case 'help.page.amp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Google AMP integration') . '</p>';
      return $output;

    default:
  }
}

function amp_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityType()->id() == 'node') {
    if (!empty($build['#attached']['html_head_link'])) {
      foreach ($build['#attached']['html_head_link'] as $key => $config) {
        if ($build['#view_mode'] == 'amp') {
          if ($config[0]['rel'] != 'canonical' && $config[0]['rel'] != 'shortlink') {
            unset($build['#attached']['html_head_link'][$key]);
          }
        }
        else if ($build['#view_mode'] == 'full') {
          if ($config[0]['rel'] == 'canonical') {
            $build['#attached']['html_head_link'][] = array(
              array(
                'rel' => 'amphtml',
                'href' => $config[0]['href'] . '/amp',
              ),
              TRUE,
            );
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function amp_theme() {
  $theme = [
    'amp_video' => array(
      'variables' => array('file' => NULL, 'description' => NULL, 'attributes' => array()),
    ),
    'amp_iframe' => array(
      'variables' => array('iframe' => NULL),
    ),
  ];

  return $theme;
}

/**
 * Prepares variables for amp video templates.
 *
 * Default template: amp-video.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *   - attributes: An associative array of attributes to be placed on the
 *     amp-video tag.
 */
function template_preprocess_amp_video(&$variables) {
  $file = $variables['file'];
  $file_entity = ($file instanceof File) ? $file : File::load($file->fid);
  $variables['src'] = file_create_url($file_entity->getFileUri());

  // Create attributes object.
  $variables['attributes'] = new Attribute($variables['attributes']);

  // Use the description as the title text if available.
  if (empty($variables['description'])) {
    $title_text = $file_entity->getFilename();
  }
  else {
    $title_text = $variables['description'];
  }
  $variables['attributes']['title'] = $title_text;
}

/**
 * Prepares variables for amp iframe templates.
 *
 * Default template: amp-iframe.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - iframe: AMP-processed text that contains the iframe code.
 */
function template_preprocess_amp_iframe(&$variables) {
  $variables['iframe'] = $variables['text'];
}

/**
* Implements hook_form_BASE_FORM_ID_alter().
*/
function amp_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $enabled = \Drupal::config('amp.settings')->get('node_types');
  $node_type = $form['type']['#default_value'];

  $form['workflow']['amp'] = array(
    '#type' => 'select',
    '#title' => t('Enable AMP pages for this content type'),
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    '#default_value' => !empty($enabled[$node_type]) ? 1 : 0,
  );

  $form['actions']['submit']['#submit'][] = 'amp_node_settings_submit';
}

function amp_node_settings_submit(&$form, FormStateInterface $form_state) {
  $amp_enabled = $form_state->getValue('amp');
  $content_type = $form['type']['#default_value'];
  $config = \Drupal::service('config.factory')->getEditable('amp.settings');
  // Like on the configuration screen, use the content type for the value
  // if it is set to true.
  $config->set('node_types.' . $content_type, !empty($amp_enabled) ? $content_type : 0);
  $config->save();
}
