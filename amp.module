<?php

/**
 * @file
 * Contains amp.module.
 */

require_once dirname(__FILE__).'/amp.admin.inc';

/**
 * Implements hook_help().
 */
function amp_help($path, $arg) {
  switch ($path) {
    case 'admin/help#amp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Google AMP integration') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function amp_menu() {
  $items = array();
  $items['admin/config/content/amp'] = array(
    'title' => 'AMP Configuration',
    'description' => 'Configure the AMP module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amp_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'amp.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function amp_theme() {
  $theme =  array(
    'amp_ad' => array(
      'variables' => array(
        'adtype' => NULL,
        'height' => NULL,
        'width' => NULL,
        'slot_attributes' => NULL,
        'slot_attributes_array' => array()
      ),
      'template' => 'amp-ad'
    ),
    'amp_analytics' => array(
      'variables' => array(
        'account' => NULL,
        'attributes' => array()
      ),
      'template' => 'amp-analytics'
    ),
    'amp_pixel' => array(
      'variables' => array(
        'domain' => NULL,
        'query_string' => NULL,
        'subs' => array(
          'AMPDOC_HOST' => array(
            'active' => FALSE
          ),
          'AMPDOC_URL' => array(
            'active' => FALSE
          ),
          'CANONICAL_HOST' => array(
            'active' => FALSE
          ),
          'CANONICAL_PATH' => array(
            'active' => FALSE
          ),
          'CANONICAL_URL' => array(
            'active' => FALSE
          ),
          'SOURCE_URL' => array(
            'active' => FALSE
          ),
          'SOURCE_HOST' => array(
            'active' => FALSE
          ),
          'DOCUMENT_CHARSET' => array(
            'active' => FALSE
          ),
          'DOCUMENT_REFERRER' => array(
            'active' => FALSE
          ),
          'TITLE' => array(
            'active' => FALSE
          ),
          'VIEWER' => array(
            'active' => FALSE
          ),
          'CONTENT_LOAD_TIME' => array(
            'active' => FALSE
          ),
          'DOMAIN_LOOKUP_TIME' => array(
            'active' => FALSE
          ),
          'DOM_INTERACTIVE_TIME' => array(
            'active' => FALSE
          ),
          'PAGE_DOWNLOAD_TIME' => array(
            'active' => FALSE
          ),
          'PAGE_LOAD_TIME' => array(
            'active' => FALSE
          ),
          'REDIRECT_TIME' => array(
            'active' => FALSE
          ),
          'SERVER_RESPONSE_TIME' => array(
            'active' => FALSE
          ),
          'TCP_CONNECT_TIME' => array(
            'active' => FALSE
          ),
          'AVAILABLE_SCREEN_HEIGHT' => array(
            'active' => FALSE
          ),
          'AVAILABLE_SCREEN_WIDTH' => array(
            'active' => FALSE
          ),
          'BROWSER_LANGUAGE' => array(
            'active' => FALSE
          ),
          'SCREEN_COLOR_DEPTH' => array(
            'active' => FALSE
          ),
          'VIEWPORT_HEIGHT' => array(
            'active' => FALSE
          ),
          'VIEWPORT_WIDTH' => array(
            'active' => FALSE
          ),
          'PAGE_VIEW_ID' => array(
            'active' => FALSE
          ),
          'RANDOM' => array(
            'active' => FALSE
          ),
          'TIMESTAMP' => array(
            'active' => FALSE
          ),
          'TOTAL_ENGAGED_TIME' => array(
            'active' => FALSE
          )
        )
      ),
      'template' => 'amp-pixel'
    )
  );

  return $theme;
}

/**
 * Implements hook_preprocess_amp_ad().
 */
function amp_preprocess_amp_ad(&$variables) {
  $variables['slot_attributes'] = drupal_attributes($variables['slot_attributes_array']);
}

/**
 * Implements hook_element_info().
 */
function amp_element_info() {
  // AMP Analytics element
  $types['amp_analytics'] = array(
    '#account' => NULL,
    '#attributes' => [],
    '#pre_render' => array('amp_pre_render_amp_analytics'),
    '#theme' => 'amp_analytics',
  );

  return $types;
}

/**
 * #pre_render callback to render amp_analytics with js library added to head.
 *
 * @param $elements
 *   A render array for amp analytics elements.
 *
 * @return
 *   The passed-in element with the js library necessary for the amp-analytics
 *   element added to head.
 */
function amp_pre_render_amp_analytics($element) {
  $head_js = array(
    '#tag' => 'script',
    '#type' => 'html_tag',
    '#attributes' => array(
      'src' => 'https://cdn.ampproject.org/v0/amp-analytics-0.1.js',
      'async' => "async",
      'custom-element' => 'amp-analytics'
    ),
  );
  drupal_add_html_head($head_js, 'amp-analytics');

  return $element;
}

/**
 * Implements hook_entity_info_alter().
 */
function amp_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['amp'] = array(
    'label' => t('AMP'),
    'custom settings' => FALSE,
  );
}

/**
 * Determines whether a request should return AMP HTML.
 */
function amp_is_amp_request() {

  // Get current path.
  $path = current_path();

  // Get current URL.
  $current_url = url(current_path(), array('absolute' => TRUE));

  // Check if URL ends with '/amp'
  if (stripos(strrev($current_url), strrev('/amp')) === 0) {
    // Get system path.
    $system_path = drupal_lookup_path('source', $path);

    // Load menu item based on system path.
    $menu_item = menu_get_item($system_path ? $system_path : current_path());

    if ($menu_item && isset($menu_item['page_arguments'][0])) {
      // Load the node.
      $node = $menu_item['page_arguments'][0];

      // Get node type.
      $node_type = node_type_get_type($node);

      // Get view mode settings for node type.
      if ($node_type) {
        $view_mode_settings = field_view_mode_settings('node', $node_type->type);
      }
      if (isset($view_mode_settings['amp']) && $view_mode_settings['amp']['custom_settings']) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_custom_theme().
 */
function amp_custom_theme() {
  if (amp_is_amp_request()) {
    return variable_get('amp_theme', 'ampsubtheme_example');
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 *
 * Switches view mode to 'amp' for AMP requests.
 */
function amp_entity_view_mode_alter(&$view_mode, $context) {
  if ($view_mode === 'full' && amp_is_amp_request()) {
    $view_mode = 'amp';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function amp_form_node_form_alter(&$form, &$form_state, $form_id) {
  $view_mode_settings = field_view_mode_settings('node', $form_state['node']->type);
  // For content type with an AMP view mode, add a "Save and view AMP" button.
  if (isset($view_mode_settings['amp']) && $view_mode_settings['amp']['custom_settings'] == TRUE) {
    // Add the buttong between "Preview" (weight of 10) and "Delete" (15).
    $form['actions']['save_view_amp'] = array(
      '#type' => 'submit',
      '#value' => t('Save and view AMP page'),
      '#submit' => array('node_form_submit', 'amp_node_form_submit'),
      '#weight' => 12,
      '#access' => TRUE,
    );
  }
}

/**
 * Submit handler for viewing the AMP page.
 */
function amp_node_form_submit(&$form, $form_state) {
  if (!empty($form_state['node']->path['alias'])) {
    drupal_goto($form_state['node']->path['alias'] . '/amp');
  }
  elseif (!empty($form_state['node']->path['source'])) {
    drupal_goto($form_state['node']->path['source'] . '/amp');
  }
}

/**
 * Implements hook_form_alter().
 */
function amp_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_display_overview_form') {
    $form['#submit'][] = 'amp_view_modes_submit';
  }
}

/**
 * Submit handler for enabling or disabling AMP view modes.
 */
function amp_view_modes_submit(&$form, $form_state) {
  $new_values = array();
  $old_values = array();
  if (isset($form_state['values']['view_modes_custom'])) {
    $new_values = array_filter($form_state['values']['view_modes_custom']);
  }
  if (isset($form_state['complete form']['modes']['view_modes_custom']['#default_value'])) {
    $old_values = $form_state['complete form']['modes']['view_modes_custom']['#default_value'];
  }
  $removed = array_diff($old_values, $new_values);
  $added = array_diff($new_values, $old_values);
  if ($type = $form['#bundle']) {
    $amp_nodes = node_load_multiple(array(), array('type' => $type));
  }
  if (is_array($removed) && in_array('amp', $removed)) {
    // Remove all AMP aliases for the content type.
    foreach ($amp_nodes as $amp_node) {
      amp_delete_amp_alias($amp_node);
    }
    // If the AMP view was removed, clear cache of AMP-enabled content.
    cache_clear_all('amp_enabled_types', 'cache');
  }
  if (is_array($added) && in_array('amp', $added)) {
    // Create all AMP aliases for the content type.
    foreach ($amp_nodes as $amp_node) {
      amp_create_amp_alias($amp_node);
    }
    // If the AMP view was added, clear cache of AMP-enabled content.
    cache_clear_all('amp_enabled_types', 'cache');
  }
}

/**
 * Implements hook_entity_insert().
 */
function amp_entity_insert($entity, $type) {
  amp_create_amp_alias($entity);
}

/**
 * Implements hook_entity_update().
 */
function amp_entity_update($entity, $type) {
  // Delete old AMP aliases.
  amp_delete_amp_alias($entity);
  // Create a new AMP alias.
  amp_create_amp_alias($entity);
}

/**
 * Implements hook_entity_delete().
 */
function amp_entity_delete($entity, $type) {
  amp_delete_amp_alias($entity);
}

/**
 * Helper function to create an AMP alias.
 */
function amp_create_amp_alias($entity) {
  $enabled_types = amp_get_enabled_types();
  // Only create aliases for AMP-enabled entities with an alias.
  if (in_array($entity->type, $enabled_types) && !empty($entity->path['alias'])) {
    $path = array(
      'source' => $entity->path['source'] . '/amp',
      'alias' => $entity->path['alias'] . '/amp',
      'language' => $entity->path['language'],
    );
  }
  // Allow nodes as well.
  if (in_array($entity->type, $enabled_types) && isset($entity->nid)) {
    if ($node_alias = drupal_get_path_alias('node/' . $entity->nid)) {
      // Only create AMP aliases for nodes with aliases;
      if ($node_alias != 'node/' . $entity->nid) {
        $path = array(
          'source' => 'node/' . $entity->nid . '/amp',
          'alias' => $node_alias . '/amp',
          'language' => $entity->language,
        );
      }
    }
  }
  // Save an AMP version of the alias.
  if (isset($path)) {
    path_save($path);
  }
}

/**
 * Helper function to delete an AMP alias.
 */
function amp_delete_amp_alias($entity) {
  if (isset($entity->path['source'])) {
    $path = $entity->path['source'];
  }
  elseif (isset($entity->nid)) {
    $path = 'node/' . $entity->nid;
  }
  if (isset($path)) {
    $amp_alias = drupal_get_path_alias($path . '/amp');
    if (isset($amp_alias) && $amp_alias != $path . '/amp') {
      path_delete(array('alias' => $amp_alias));
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function amp_page_alter(array &$page) {
  if (amp_is_amp_request()) {
    $google_analytics_id = variable_get('amp_google_analytics_id');
    if (!empty($google_analytics_id)) {
      $amp_analytics = array(
        '#type' => 'amp_analytics',
        '#attributes' => array(
          'type' => 'googleanalytics'
        ),
        '#account' => $google_analytics_id
      );
      $page['page_bottom']['amp_analytics'] = $amp_analytics;
    }

    if (variable_get('amp_pixel')) {
      $domain = variable_get('amp_pixel_domain_name');
      $query_string = variable_get('amp_pixel_query_string');
      $subs_random = FALSE;

      if (!empty($domain) && !empty($query_string)) {
        $subs_random = variable_get('amp_pixel_random_number');
      }

      $subs = array(
        'RANDOM' => array(
          'active' => $subs_random ? TRUE : FALSE
        )
      );

      $amp_pixel = array(
        '#theme' => 'amp_pixel',
        '#domain' => $domain,
        '#query_string' => $query_string,
        '#subs' => $subs
      );

      $page['page_bottom']['amp_pixel'] = $amp_pixel;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function amp_entity_view_alter(&$build, $type) {
  $enabled_types = amp_get_enabled_types();
  // Show amphtml links on AMP-enabled nodes so search engines can find AMP.
  if ($type == 'node' && in_array($build['#bundle'], $enabled_types)) {
    if ($build['#view_mode'] == 'full') {
      $path = '/' . drupal_get_path_alias('node/' . $build['#node']->nid) . "/amp";
      drupal_add_html_head_link(array('rel' => 'amphtml', 'href' => $path), TRUE);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function amp_block_info() {
  $blocks = array();
  $blocks['amp_google_adsense_block'] = array(
    'info' => t('AMP Google Adsense block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $block_ids = array(1, 2, 3, 4);
  foreach ($block_ids as $block_id) {
    $blocks['amp_google_doubleclick_block_' . $block_id] = array(
      'info' => t('AMP Google DoubleClick for Publishers block ' . $block_id),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function amp_block_configure($delta = '') {
  $form = array();
  // In Drupal 7 we have to hard code each block.
  $doubleclick_blocks = array(
    'amp_google_doubleclick_block_1',
    'amp_google_doubleclick_block_2',
    'amp_google_doubleclick_block_3',
    'amp_google_doubleclick_block_4',
  );
  if ($delta == 'amp_google_adsense_block') {
    $form['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => variable_get('amp_google_adsense_block_width'),
      '#maxlength' => 25,
      '#size' => 20,
    );
    $form['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => variable_get('amp_google_adsense_block_height'),
      '#maxlength' => 25,
      '#size' => 20,
    );
    $form['data_ad_slot'] = array(
      '#type' => 'textfield',
      '#title' => t('Data ad slot'),
      '#default_value' => variable_get('amp_google_adsense_block_data_ad_slot'),
      '#maxlength' => 25,
      '#size' => 20,
    );
  }
  elseif (in_array($delta, $doubleclick_blocks)) {
    $form['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => variable_get($delta . '_width'),
      '#maxlength' => 25,
      '#size' => 20,
    );
    $form['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => variable_get($delta . '_height'),
      '#maxlength' => 25,
      '#size' => 20,
    );
    $form['data_ad_slot'] = array(
      '#type' => 'textfield',
      '#title' => t('Data ad slot'),
      '#default_value' => variable_get($delta . '_data_ad_slot'),
      '#maxlength' => 25,
      '#size' => 20,
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function amp_block_save($delta = '', $edit = array()) {
  $doubleclick_blocks = array(
    'amp_google_doubleclick_block_1',
    'amp_google_doubleclick_block_2',
    'amp_google_doubleclick_block_3',
    'amp_google_doubleclick_block_4',
  );
  if ($delta == 'amp_google_adsense_block') {
    variable_set('amp_google_adsense_block_width', $edit['width']);
    variable_set('amp_google_adsense_block_height', $edit['height']);
    variable_set('amp_google_adsense_block_data_ad_slot', $edit['data_ad_slot']);
  }
  elseif (in_array($delta, $doubleclick_blocks)) {
    variable_set($delta . '_width', $edit['width']);
    variable_set($delta . '_height', $edit['height']);
    variable_set($delta . '_data_ad_slot', $edit['data_ad_slot']);
  }
}


/**
 * Implements hook_block_view().
 */
function amp_block_view($delta = '') {
  $block = array();
  $doubleclick_blocks = array(
    'amp_google_doubleclick_block_1',
    'amp_google_doubleclick_block_2',
    'amp_google_doubleclick_block_3',
    'amp_google_doubleclick_block_4',
  );
  if ($delta == 'amp_google_adsense_block') {
    // Start by getting global Adsense configuration.
    $adsense_id = variable_get('amp_google_adsense_id', '');
    if (isset($adsense_id)) {
      $width = variable_get('amp_google_adsense_block_width', '');
      $height = variable_get('amp_google_adsense_block_height', '');
      $data_ad_slot = variable_get('amp_google_adsense_block_data_ad_slot', '');
      if (!empty($width) && !empty($height) && !empty($data_ad_slot)) {
        $block['content']['amp_adsense'] = array(
          '#theme' => 'amp_ad',
          '#adtype' => 'adsense',
          '#height' => $height,
          '#width' => $width,
          '#slot_attributes_array' => array(
            'data-ad-client'  => $adsense_id,
            'data-ad-slot'  => $data_ad_slot,
          ),
        );
      }
    }
    else {
      $block['content'] = array(
        'message' => array(
          '#type' => 'markup',
          '#markup' => t('This block requires a Google Adsense ID, width, height, and a data ad slot.'),
          '#suffix' => '',
        ),
      );
    }
  }
  elseif (in_array($delta, $doubleclick_blocks)) {
    $doubleclick_id = variable_get('amp_google_doubleclick_id', '');
    if (isset($doubleclick_id) && $doubleclick_id != "/") {
      $width = variable_get($delta . '_width', '');
      $height = variable_get($delta . '_height', '');
      $data_ad_slot = variable_get($delta . '_data_ad_slot', '');
      if (!empty($width) && !empty($height) && !empty($data_ad_slot)) {
        $block['content']['amp_doubleclick'] = array(
          '#theme' => 'amp_ad',
          '#adtype' => 'doubleclick',
          '#height' => $height,
          '#width' => $width,
          '#slot_attributes_array' => array(
            'data-slot'  => $doubleclick_id . '/' . $data_ad_slot,
          ),
        );
      }
      else {
        $block['content'] = array(
          'message' => array(
            '#type' => 'markup',
            '#markup' => t('This block requires a Google DoubleClick ID, width, height, and a data ad slot.'),
            '#suffix' => '',
          ),
        );
      }
    }
  }
  return $block;
}

/**
* Implements hook_field_formatter_info().
*/
function amp_field_formatter_info() {
  return array(
    'amp_text' => array(
      'label' => t('AMP text'),
      'description' => t('Display AMP text.'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
    'amp_text_trimmed' => array(
      'label' => t('AMP trimmed text'),
      'description' => t('Display AMP trimmed text.'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
    'amp_text_summary_or_trimmed' => array(
      'label' => t('AMP summary or trimmed'),
      'description' => t('Display AMP summary or trimmed text.'),
      'field types' => array('text_with_summary'),
    ),
    'amp_video' => array(
      'label' => t('AMP video'),
      'description' => t('Display an AMP video file.'),
      'field types' => array('file'),
    ),
    'amp_image' => array(
      'label' => t('AMP image'),
      'description' => t('Display an AMP image file.'),
      'field types' => array('image'),
    ),
    'amp_iframe' => array(
      'label' => t('AMP iframe'),
      'description' => t('Display amp-iframe content.'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
  );
}

/**
* Implements hook_field_formatter_view().
*/
function amp_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  return $element;
}
